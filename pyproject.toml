[project]
name = "ai-agent-boilerplate"
version = "0.1.0"
description = "Production-ready AI agent boilerplate with sophisticated memory architecture using LangGraph + MongoDB"
authors = [{name = "AI Agent Team", email = "team@aiagent.dev"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.dependencies]
# Core LangGraph and LangChain
langgraph = "^0.2.0"
langgraph-checkpoint-mongodb = "^0.1.0"
langchain = "^0.3.0"
langchain-core = "^0.3.0"
langchain-community = "^0.3.0"
langchain-openai = "^0.2.0"
langchain-anthropic = "^0.2.0"
langchain-google-genai = "^2.0.0"

# MongoDB and storage
motor = "^3.6.0"  # Async MongoDB driver
pymongo = "^4.8.0"
redis = {extras = ["hiredis"], version = "^5.1.0"}

# FastAPI and web
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.31.0"}
websockets = "^13.0"
pydantic = "^2.9.0"
pydantic-settings = "^2.5.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.12"
httpx = "^0.27.0"
slowapi = "^0.1.9"  # Rate limiting

# AI and embeddings
voyageai = "^0.3.0"
openai = "^1.50.0"
anthropic = "^0.34.0"
google-generativeai = "^0.8.0"
tiktoken = "^0.8.0"

# Document processing
pypdf = "^5.0.0"
python-docx = "^1.1.0"
beautifulsoup4 = "^4.12.3"
markdownify = "^0.13.0"

# Monitoring and observability
prometheus-client = "^0.20.0"
opentelemetry-api = "^1.27.0"
opentelemetry-sdk = "^1.27.0"
opentelemetry-instrumentation-fastapi = "^0.48b0"
langfuse = "^2.50.0"
structlog = "^24.4.0"

# Utilities
python-dotenv = "^1.0.1"
tenacity = "^9.0.0"
pendulum = "^3.0.0"
orjson = "^3.10.0"
aiofiles = "^24.1.0"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.8.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    "ipdb>=0.13.13",
    "rich>=13.8.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-timeout>=2.3.1",
    "faker>=28.0.0",
    "factory-boy>=3.3.0",
    "httpx>=0.27.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

[build-system]
requires = ["setuptools>=69.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = ["E501", "B008", "B905"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra --strict-markers --cov=src --cov-report=term-missing"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
